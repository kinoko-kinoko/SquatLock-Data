name: Manus merge (all countries, makes PR; also updates repo-root catalogs)

on:
  push:
    paths:
      - "data/manus/*.json"
      - "data/manus/**/*.json"

permissions:
  contents: write
  pull-requests: write

jobs:
  merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      # 変更がなくても動くように、data/manus 配下の全 JSON をスキャンして
      # 国コードごとに scripts/catalog_<cc>.json を再生成
      - name: Build merged catalogs from Manus drops
        id: build
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, re, os, glob, sys
          from pathlib import Path
          root = Path(".")
          manus_files = set()
          manus_files |= set(glob.glob("data/manus/*.json"))
          manus_files |= set(glob.glob("data/manus/**/*.json", recursive=True))

          # 国コード抽出: data/manus/us/xxx.json または manus_us_YYYYMMDD.json
          def guess_cc(p: str) -> str|None:
            m = re.search(r"data/manus/([a-z]{2})/", p)
            if m: return m.group(1).lower()
            m = re.search(r"manus_([a-z]{2})_\d{8}\.json$", p)
            if m: return m.group(1).lower()
            return None

          # 既存 catalog を読む
          def load_catalog(path: Path) -> list[dict]:
            if path.exists():
              try:
                with path.open("r", encoding="utf-8") as f:
                  return json.load(f)
              except Exception:
                return []
            return []

          # 重複idを統合（既存 > 新規の優先。idは大小区別せず比較）
          def merge_items(existing: list[dict], incoming: list[dict]) -> list[dict]:
            by_id = {}
            for it in existing:
              k = str(it.get("id","")).lower()
              if not k: continue
              by_id[k] = it
            for it in incoming:
              k = str(it.get("id","")).lower()
              if not k: continue
              if k in by_id:
                # 既存を優先。新規側の欠損フィールドだけ補完（念のため）
                cur = by_id[k]
                for field in ("schemes","universalLinks","webHosts","aliases","categories","symbol","name"):
                  if (not cur.get(field)) and it.get(field):
                    cur[field] = it[field]
                # source は via を 'manus' に寄せる（countryは既存尊重）
                s = cur.get("source") or {}
                s.setdefault("country", (it.get("source") or {}).get("country"))
                s["via"] = "manus"
                cur["source"] = s
              else:
                by_id[k] = it
            return list(by_id.values())

          # 入力を国コードごとにバケツ分け
          buckets: dict[str, list[dict]] = {}
          for p in sorted(manus_files):
            cc = guess_cc(p)
            if not cc: 
              print(f"skip (no cc): {p}")
              continue
            try:
              arr = json.load(open(p,"r",encoding="utf-8"))
              # source を整形
              norm = []
              for it in arr:
                it = dict(it)
                src = dict(it.get("source") or {})
                src["via"] = "manus"
                src["country"] = (src.get("country") or cc.upper())
                it["source"] = src
                norm.append(it)
              buckets.setdefault(cc,[]).extend(norm)
              print(f"loaded {len(arr):4d} from {p} -> {cc}")
            except Exception as e:
              print(f"ERR reading {p}: {e}", file=sys.stderr)

          # 既存 scripts/catalog_<cc>.json とマージして scripts/ に書き戻す
          out_paths = []
          scripts = Path("scripts")
          scripts.mkdir(exist_ok=True)
          for cc, incoming in sorted(buckets.items()):
            dst = scripts / f"catalog_{cc}.json"
            prior = load_catalog(dst)
            merged = merge_items(prior, incoming)
            merged.sort(key=lambda x: (x.get("name") or "").lower(),)
            with dst.open("w", encoding="utf-8") as f:
              json.dump(merged, f, ensure_ascii=False, indent=2)
              f.write("\n")
            out_paths.append(str(dst))
            print(f"Wrote {dst} (items={len(merged)})")

          # グローバルは「今は」編集しない。必要ならここで再構築可
          # 出力ファイル一覧を環境ファイルへ
          with open(os.environ["GITHUB_OUTPUT"],"a") as w:
            w.write(f"paths={json.dumps(out_paths)}\n")
          PY

      - name: Copy merged catalogs to repo root (for GitHub Pages / app fetch)
        # リポジトリ直下にも反映（アプリはここを読む）
        run: |
          set -euo pipefail
          shopt -s nullglob
          for f in scripts/catalog_*.json; do
            base="$(basename "$f")"
            cp -f "$f" "$base"
          done
          # グローバルも scripts 側が存在すれば同期（無ければスキップ）
          if [ -f scripts/catalog_global.json ]; then
            cp -f scripts/catalog_global.json catalog_global.json
          fi

      - name: Create working branch
        id: branch
        run: |
          set -euo pipefail
          TS="$(date +'%Y%m%d-%H%M%S')"
          BR="manus-merge/${TS}"
          git checkout -b "$BR"
          git add scripts/catalog_*.json catalog_*.json || true
          if git diff --staged --quiet; then
            echo "no changes; skip commit"
            echo "branch=$BR" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          git config user.name  "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git commit -m "chore(manus): merge drops into catalogs (${TS})"
          git push -u origin "$BR"
          echo "branch=$BR" >> "$GITHUB_OUTPUT"

      - name: Open PR (label: manus, catalog; comment squash)
        if: steps.branch.outputs.branch != ''
        uses: actions/github-script@v7
        with:
          github-token: ${{ github.token }}
          script: |
            const branch = core.getInput('branch', { required: false }) || process.env.BRANCH || '${{ steps.branch.outputs.branch }}';
            const owner = context.repo.owner;
            const repo  = context.repo.repo;

            const title = `chore(manus): merge drops into catalogs (${new Date().toISOString().slice(0,10)})`;
            const body  = [
              'Manus の出力を各国カタログへ自動マージしました。',
              '',
              '- 置き場: `data/manus/**/manus_<cc>_YYYYMMDD.json`（フラットでもOK）',
              '- 既存項目は **上書きせずにユニオン**（既存優先）で安全に統合',
              '- `source.via = "manus"` を自動付与',
              '- **Squash and merge** を選んでください（履歴が1コミットで綺麗になります）'
            ].join('\n');

            const pr = await github.rest.pulls.create({
              owner, repo,
              title,
              head: branch,
              base: 'main',
              body
            });

            await github.rest.issues.addLabels({
              owner, repo, issue_number: pr.data.number,
              labels: ['manus', 'catalog']
            });

            console.log(`PR #${pr.data.number} created: ${pr.data.html_url}`);
