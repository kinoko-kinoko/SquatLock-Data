name: Manus merge (all countries, nested folders OK)

on:
  # WebUI/CLI どちらのアップでも即トリガ
  push:
    branches: [ main ]
    paths:
      - 'data/manus/**.json'
      - 'data/manus/**/*.json'
  # 手動実行も可
  workflow_dispatch: {}

permissions:
  contents: write
  pull-requests: write

jobs:
  merge:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
            # PRを作るので履歴浅くてOK
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Merge manus drops into catalogs
        id: merge
        run: |
          set -euo pipefail
          python - <<'PY'
          import json, re, os, sys, glob, unicodedata, pathlib
          repo = pathlib.Path(".")

          # manus ファイルを拾う（data/manus/us/manus_us_YYYYMMDD.json, data/manus/manus_us_YYYYMMDD.json どちらもOK）
          candidates = set()
          for pat in ("data/manus/**/*.json", "data/manus/*.json"):
              for p in glob.glob(pat, recursive=True):
                  candidates.add(p)

          # 国コードごとに振り分け
          by_cc: dict[str, list[str]] = {}
          rx = re.compile(r"^data/manus/(?:(?P<cc_dir>[a-z]{2})/)?manus_(?P<cc_file>[a-z]{2})_\d{8}\.json$")
          for p in sorted(candidates):
              m = rx.match(p)
              if not m:
                  continue
              cc = (m.group("cc_dir") or m.group("cc_file")).lower()
              by_cc.setdefault(cc, []).append(p)

          if not by_cc:
              print("::notice ::No manus drops found. Nothing to do.")
              print("changed=0")
              sys.exit(0)

          def slug(s: str) -> str:
              # idが無い時のフェイルセーフ（基本はManus側で id 付与想定）
              z = unicodedata.normalize("NFKC", s).lower()
              z = re.sub(r"[^a-z0-9\-]+", "-", z).strip("-")
              z = re.sub(r"-{2,}", "-", z)
              return z or "app"

          total_upserts = 0
          touched: list[str] = []

          for cc, files in sorted(by_cc.items()):
              target = repo / "scripts" / f"catalog_{cc}.json"
              target.parent.mkdir(parents=True, exist_ok=True)

              if target.exists():
                  try:
                      cur = json.loads(target.read_text(encoding="utf-8"))
                  except Exception:
                      cur = []
              else:
                  cur = []

              # 既存を id マップ化
              index: dict[str, dict] = {}
              for it in cur:
                  iid = (it.get("id") or "").strip()
                  if iid:
                      index[iid] = it

              added = 0
              replaced = 0

              for p in files:
                  try:
                      new_list = json.loads(pathlib.Path(p).read_text(encoding="utf-8"))
                  except Exception as e:
                      print(f"::warning ::Skip unreadable JSON: {p} ({e})")
                      continue

                  if not isinstance(new_list, list):
                      print(f"::warning ::Skip non-list JSON: {p}")
                      continue

                  for app in new_list:
                      if not isinstance(app, dict):
                          continue

                      # id が無い場合に最低限の生成（なるべく Manus 側で id 付けを推奨）
                      if not app.get("id"):
                          name = app.get("name") or app.get("id") or "app"
                          app["id"] = slug(str(name))

                      # source.via = "manus" を必ず付与（他の source 情報は保持）
                      src = app.get("source") or {}
                      if not isinstance(src, dict):
                          src = {}
                      src["via"] = "manus"
                      app["source"] = src

                      iid = app["id"]
                      if iid in index:
                          index[iid] = app
                          replaced += 1
                      else:
                          index[iid] = app
                          added += 1

              merged = list(index.values())
              merged.sort(key=lambda x: (x.get("id") or ""))

              # 変更があれば上書き出力
              before = json.dumps(cur, ensure_ascii=False, sort_keys=True)
              after  = json.dumps(merged, ensure_ascii=False, sort_keys=True)
              if before != after:
                  target.write_text(json.dumps(merged, ensure_ascii=False, indent=2) + "\n", encoding="utf-8")
                  touched.append(str(target))
                  total_upserts += (added + replaced)
                  print(f"::notice ::[{cc}] upserted {added}+{replaced} -> {target}")
              else:
                  print(f"::notice ::[{cc}] no changes -> {target}")

          # 以降の step へ変更ファイル一覧を渡す
          if touched:
              with open(os.environ["GITHUB_OUTPUT"], "a") as wf:
                  wf.write(f"touched={json.dumps(touched)}\n")
          print(f"changed={1 if touched else 0}")
          PY

      - name: Create Pull Request
        if: steps.merge.outputs.touched != ''
        uses: peter-evans/create-pull-request@v6
        with:
          commit-message: "chore(manus): merge drops into catalogs ($(date +'%Y-%m-%d'))"
          title: "chore(manus): merge drops into catalogs"
          body: |
            Manus の出力を各国カタログへ自動マージしました。

            - 置き場: `data/manus/**/manus_<cc>_YYYYMMDD.json`（フラット置きもOK）
            - `source.via = "manus"` を強制付与
            - 既存 `id` は上書き／未登録は追加（id 無しは暫定生成）

            **運用メモ**
            - マージ時は **Squash and merge** を推奨（履歴を日付1コミットに集約）
          branch: chore/manus-merge
          labels: |
            manus
            catalog
          add-paths: |
            scripts/catalog_*.json
          delete-branch: true
